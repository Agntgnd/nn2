
import discord
from discord.ext import commands
import random
import os
import asyncio
from datetime import datetime, timedelta
from database import database, create_tables, get_user, update_user

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)


def parse_last_farm(dt):
    if dt is None:
        return datetime(1970, 1, 1)
    if isinstance(dt, str):
        return datetime.fromisoformat(dt)
    if isinstance(dt, datetime):
        return dt
    return datetime(1970, 1, 1)


class MainMenu(discord.ui.View):
    def __init__(self, author):
        super().__init__(timeout=None)
        self.author = author

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="–ü–∞—Ç—Ä–∏–æ—Ç", style=discord.ButtonStyle.primary, emoji="üá∑üá∫")
    async def patriot_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        data = await get_user(interaction.user.id)
        chance = random.random()
        if chance <= 0.33:
            role_name = "–ü–∞—Ç—Ä–∏–æ—Ç"
            role = discord.utils.get(interaction.guild.roles, name=role_name)
            if not role:
                role = await interaction.guild.create_role(name=role_name)
            if role not in interaction.user.roles:
                await interaction.user.add_roles(role)
                data["roles"].append(role_name)
            data["credits"] += 100
            await update_user(interaction.user.id, data["credits"], data["roles"], data["last_farm"])
            await interaction.response.send_message(f"üéâ {interaction.user.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å **{role_name}** –∏ 100 —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        else:
            await interaction.response.send_message(f"üòû {interaction.user.mention}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

    @discord.ui.button(label="–ë–∞–ª–∞–Ω—Å", style=discord.ButtonStyle.secondary, emoji="üí∞")
    async def balance_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        data = await get_user(interaction.user.id)
        await interaction.response.send_message(f"üí∞ {interaction.user.mention}, —É –≤–∞—Å **{data['credits']}** —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤.")

    @discord.ui.button(label="–§–∞—Ä–º", style=discord.ButtonStyle.success, emoji="‚õèÔ∏è")
    async def farm_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        data = await get_user(interaction.user.id)
        now = datetime.utcnow()
        last_farm = parse_last_farm(data["last_farm"])
        if now - last_farm < timedelta(minutes=5):
            remaining = timedelta(minutes=5) - (now - last_farm)
            await interaction.response.send_message(f"‚è≥ {interaction.user.mention}, –≤—ã —É–∂–µ —Ñ–∞—Ä–º–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining.total_seconds())} —Å–µ–∫—É–Ω–¥.")
            return
        reward = random.randint(40, 70)
        data["credits"] += reward
        data["last_farm"] = now.isoformat()
        await update_user(interaction.user.id, data["credits"], data["roles"], data["last_farm"])
        await interaction.response.send_message(f"üí∏ {interaction.user.mention}, –≤—ã –Ω–∞—Ñ–∞—Ä–º–∏–ª–∏ **{reward}** —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤!")

    @discord.ui.button(label="–ü—Ä–æ—Ñ–∏–ª—å", style=discord.ButtonStyle.primary, emoji="üë§")
    async def profile_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        data = await get_user(interaction.user.id)
        roles = data["roles"]
        roles_str = ", ".join(roles) if roles else "–ù–µ—Ç —Ä–æ–ª–µ–π"
        embed = discord.Embed(title=f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {interaction.user.display_name}", color=discord.Color.blue())
        embed.set_thumbnail(url=interaction.user.avatar.url if interaction.user.avatar else "")
        embed.add_field(name="–°–æ—Ü. –∫—Ä–µ–¥–∏—Ç—ã", value=str(data["credits"]), inline=False)
        embed.add_field(name="–†–æ–ª–∏", value=roles_str, inline=False)
        await interaction.response.send_message(embed=embed)

    @discord.ui.button(label="–°–≤–æ—è —Ä–æ–ª—å", style=discord.ButtonStyle.secondary, emoji="‚öôÔ∏è")
    async def custom_role_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        data = await get_user(interaction.user.id)
        if data["credits"] < 3000:
            await interaction.response.send_message(f"‚ùå {interaction.user.mention}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω—É–∂–Ω–æ 3000).")
            return

        await interaction.response.send_message(f"üõ†Ô∏è {interaction.user.mention}, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ (–±–µ–∑ @), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", ephemeral=True)

        def check(m):
            return m.author.id == interaction.user.id and m.channel == interaction.channel

        try:
            msg = await bot.wait_for("message", check=check, timeout=30)
            role_name = msg.content.strip()
            role = discord.utils.get(interaction.guild.roles, name=role_name)
            if not role:
                role = await interaction.guild.create_role(name=role_name)
            await interaction.user.add_roles(role)
            if role_name not in data["roles"]:
                data["roles"].append(role_name)
            data["credits"] -= 3000
            await update_user(interaction.user.id, data["credits"], data["roles"], data["last_farm"])
            await interaction.followup.send(f"‚úÖ {interaction.user.mention}, —Ä–æ–ª—å '{role_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", ephemeral=True)
        except asyncio.TimeoutError:
            await interaction.followup.send(f"‚åõ {interaction.user.mention}, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", ephemeral=True)


@bot.event
async def on_ready():
    await database.connect()
    await create_tables()
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")


@bot.command()
async def –º–µ–Ω—é(ctx):
    view = MainMenu(ctx.author)
    await ctx.send(f"–ü—Ä–∏–≤–µ—Ç, {ctx.author.mention}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:", view=view)


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ !–º–µ–Ω—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–æ–∫.")
    else:
        await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}")


bot.run(os.getenv("DISCORD_TOKEN"))
